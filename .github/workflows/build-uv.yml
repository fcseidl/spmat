# =============================================================================
# GitHub Actions Workflow: Build Wheels and Source Distribution (uv-first)
# =============================================================================

name: build-uv

on:
  push:
  pull_request:
  workflow_dispatch:

permissions:
  contents: read

env:
  # Let uv install into runner's Python where needed (pip-compatible interface)
  UV_SYSTEM_PYTHON: "1"

jobs:
  # ========================================================================
  # Build wheels (Linux, Windows, macOS)
  # ========================================================================
  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      # Share uv cache between steps/jobs
      UV_CACHE_DIR: ${{ github.workspace }}/.uv-cache

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-24.04-arm, windows-latest, macos-13, macos-latest]

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Install uv and set Python (faster than uv python install on GitHub runners)
      - name: Install uv & set Python
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.13"             # pin uv (best practice)
          python-version: "3.12"
          enable-cache: true            # persist uv cache between runs

      # cibuildwheel still drives the manylinux/macos/windows builds
      - name: Build wheels with cibuildwheel
        uses: pypa/cibuildwheel@v3.1.4
        env:
          # Skip Windows 32-bit builds
          CIBW_SKIP: "*-win32"

          # Make uv-related env vars visible inside Linux Docker images
          CIBW_ENVIRONMENT_PASS_LINUX: "UV_SYSTEM_PYTHON UV_CACHE_DIR"

          # Pre-build step: keep build tooling current via uv (instead of pip)
          CIBW_BEFORE_BUILD: >
            uv pip install --upgrade pip setuptools wheel

          # Run tests with uvx + pytest (no separate TEST_REQUIRES needed)
          CIBW_TEST_COMMAND: >
            uvx pytest -v {project}/tests
        with:
          output-dir: wheelhouse

      - name: Upload wheel artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels-${{ matrix.os }}
          path: wheelhouse/*.whl
          retention-days: 30

  # ========================================================================
  # Build source distribution (sdist) with uv
  # ========================================================================
  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install uv & set Python
        uses: astral-sh/setup-uv@v6
        with:
          version: "0.8.13"
          python-version: "3.12"
          enable-cache: true

      - name: Build source distribution
        run: |
          uv pip install build
          uv run python -m build --sdist
          ls -la dist/

      - name: Upload source distribution artifact
        uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/*.tar.gz
          retention-days: 30

  # ========================================================================
  # Collect all artifacts for potential deployment
  # ========================================================================
  collect_artifacts:
    name: Collect all artifacts
    needs: [build_wheels, build_sdist]
    runs-on: ubuntu-latest
    steps:
      - name: Download wheel artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          pattern: wheels-*
          merge-multiple: true

      - name: Download source distribution
        uses: actions/download-artifact@v4
        with:
          name: sdist
          path: dist

      - name: Verify all artifacts
        run: |
          echo "Wheels found:" && ls -la dist/*.whl || true
          echo "Source dists found:" && ls -la dist/*.tar.gz || true
          echo "Total artifacts:" && ls -la dist/

      - name: Upload combined artifacts
        uses: actions/upload-artifact@v4
        with:
          name: all-distributions
          path: dist/*
          retention-days: 30
